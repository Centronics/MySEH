#include "Example3.h"

TestClassThree::TestClassThree()
{
	__asm nop;
}

TestClassThree::~TestClassThree() //деструктор выполнится в любом случае
{
	int i = 0, j = 1;
	j /= i; //в данном примере это вызовет исключение и помешает вызову деструктора объекта Obj, если установлено "НЕТ"
	//если установлено /ЕНА, то это исключение не будет обработано и будет вызван следующий деструктор согласно очереди
}

TestClassThree_Two::TestClassThree_Two()
{
	__asm nop;
}

TestClassThree_Two::~TestClassThree_Two()
{
	__asm nop;
}

void Example3()
{
	try
	{
		TestClassThree_Two ert;
		try
		{
			TestClassThree_Two Obj; //деструктор будет вызван, если установлен параметр /ЕНА
			TestClassThree ert1; //деструктор кидает исключение, вызывается всегда
			//если установлен /EHA, то исключение в деструкторе объекта ert1 не помешает выполниться деструктору объекта Obj
			__asm nop;
		}
		catch(...)
		{
			__asm nop; //делаем что-то
			throw (char)2; //кидаем новое исключение следующему по цепочке обработчику
						   //если изменить тип, то тогда исключение не будет обработано
		}
	}
	catch(char y) //перед обработкой этого исключения вызовется деструктор объекта ert, только если установлена обработка исключения /ЕНА или /ЕНS[C]
	{
		__asm nop;
	}
}